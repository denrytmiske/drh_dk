<?php

/**
 * @file
 * nodereference_explorer.module
 * Root module class holding basic information about
 * theme templates, menu callbacks, views integration, as
 * well as custom includes, css and js functions
 */

//Global variables, name and path of the module
define('NODE_REFERENCE_EXPLORER_MODULE_NAME', 'nodereference_explorer');
define('NODE_REFERENCE_EXPLORER_MODULE_PATH', drupal_get_path('module', NODE_REFERENCE_EXPLORER_MODULE_NAME));
define('NODE_REFERENCE_EXPLORER_DEFAULT_VIEW_NAME', NODE_REFERENCE_EXPLORER_MODULE_NAME . '_default');

define('NODE_REFERENCE_EXPLORER_MENU_CALLBACK_DIALOG', 'nodereference_explorer/dialog');
define('NODE_REFERENCE_EXPLORER_MENU_CALLBACK_MODALFRAME', 'nodereference_explorer/modalframe');
define('NODE_REFERENCE_EXPLORER_MENU_CALLBACK_PREVIEW', 'nodereference_explorer/preview');
define('NODE_REFERENCE_EXPLORER_MENU_CALLBACK_PREVIEW_DISPLAYS', 'nodereference_explorer/preview_displays');

/**
 * Definition of entry points to the module
 * The item urls (keys) are delegated to the page call backs
 * functions
 * @return array of menu items
 */
function nodereference_explorer_menu() {

  $items = array();

  // module menu item is also root of the tabbed views in the dialog.
  $items[NODE_REFERENCE_EXPLORER_MODULE_NAME] = array(
    'access arguments' => FALSE,
  );
  
  $base = array(
    'file' => 'nodereference_explorer.menu.inc',
    'file path' => NODE_REFERENCE_EXPLORER_MODULE_PATH . '/includes',
  );

  // views is responsible for the access control of these callbacks. the field
  // potentially has its own permissions.
  $items[NODE_REFERENCE_EXPLORER_MENU_CALLBACK_DIALOG] = $base + array(
    'page callback' => 'nodereference_explorer_dialog',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  //css and js files preparing modalframe
  $items[NODE_REFERENCE_EXPLORER_MENU_CALLBACK_MODALFRAME] = $base + array(
    'page callback' => 'nodereference_explorer_modalframe',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  //retrieving node detail view via JSON
  $items[NODE_REFERENCE_EXPLORER_MENU_CALLBACK_PREVIEW] = $base + array(
    'page callback' => 'nodereference_explorer_preview',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  //get all displays as options for choice as preview display in the widget settings
  $items[NODE_REFERENCE_EXPLORER_MENU_CALLBACK_PREVIEW_DISPLAYS] = $base + array(
    'page callback' => 'nodereference_explorer_preview_displays',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function nodereference_explorer_elements() {

  $elements = array();

  $elements[NODE_REFERENCE_EXPLORER_MODULE_NAME] = array(
    '#input' => TRUE,
    '#columns' => array('name', 'actions', 'preview', 'value'),
    '#delta' => 0,
    '#process' => array('nodereference_explorer_widget_process'), //one processing function calling a parent process function
    '#autocomplete_path' => FALSE,
  );
  return $elements;
}

/**
 * Definition of module and field related themes.
 * @return array of themes and called theming function
 */
function nodereference_explorer_theme() {

  $path = NODE_REFERENCE_EXPLORER_MODULE_PATH .'/theme';

  $themes = array();

  $themes['nodereference_explorer'] = array( // theme for form element including autocomplete and preview
    'arguments' => array('element' => NULL),
    'function' => 'theme_nodereference_explorer',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $themes['nodereference_explorer_button'] = array( // theme for form element including autocomplete and preview
    'arguments' => array('element' => NULL),
    'function' => 'theme_nodereference_explorer_button',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $themes['nodereference_explorer_dialog'] = array( //dialog template
    'template' => 'nodereference-explorer-dialog',
    'arguments' => array(
  	  'title' => NULL,
      'tabs' => array(),
      'filters' => array(),
      'displays' => array(),
    ),
    'path' => $path,
    'file' => 'theme.inc',
  );

  return $themes;
}

/**
 * Implementation of hook_views_api().
 * Referenced php includes for views handling
 * @return Array with Views API version.
 */
function nodereference_explorer_views_api() {
  return array(
    'api' => 2,
    'path' => NODE_REFERENCE_EXPLORER_MODULE_PATH . '/includes',
  );
}

/**
 * Implementation of hook_init().
 *
 * Some start up/boot work is done here when the module is
 * loaded. The function is called in any context (front or back end).
 * Actually some global include files are loaded which logically
 * seperated for better maintanance and overview.
 */
function nodereference_explorer_init() {
  //include permanent header files
  nodereference_explorer_include(
    array(
      'nodereference_explorer.widget',
      'nodereference_explorer.widget.settings'
    )
  );
}

/**
 * Initiate all plugins sources, i. e. include and js files. A list
 * of available plugins is returned.
 * @param $module
 *   Name of module
 * @return
 *   array of plugins, e. g. array('nodereference', 'link');
 */
function nodereference_explorer_plugins($module = 'content') {
	
  static $plugins; //load plugin sources only once
  if (!isset($plugins) || empty($plugins)) {
  	$plugins = array();
  	//scan directories, e. g. ../content/xxx (nodereference)
    $dirs = file_scan_directory(
      NODE_REFERENCE_EXPLORER_MODULE_PATH . "/plugins/$module", 
  	  '^.*$', 
      array('.', '..', 'CVS', "nodereference_explorer_plugin_{$module}.inc"), 
      0, 
      FALSE
    );
    //Add plugin name but check if directory contains .inc and .js file
    foreach ($dirs as $dir) {
      $plugins[] = $dir->basename;
    }
  }
  return $plugins;
}

/**
 * Load a plugin class by field type (and module)
 * @param $type
 *   CCK field type
 * @param $module
 *   Name of module
 * @return
 *   plugin object
 */
function nodereference_explorer_plugins_load_plugin($field = 'nodereference', $module = 'content') {
  static $loaded_plugins; //cache for loaded plugins
  if (!isset($loaded_plugins[$field])) {
    $class = "nodereference_explorer_plugin_{$module}_{$field}"; 
    $plugin = "plugins/$module/$field/$class"; //plugin path
    module_load_include('inc', NODE_REFERENCE_EXPLORER_MODULE_NAME, $plugin); //add include file
    drupal_add_js(NODE_REFERENCE_EXPLORER_MODULE_PATH . "/$plugin.js"); //add JS file
    $loaded_plugins[$field] = new $class(); //create plugin by name
  }
  return $loaded_plugins[$field];
}

/**
 * Add all include files in the "includes" subdirectory
 */
function nodereference_explorer_include_all() {
  $path = NODE_REFERENCE_EXPLORER_MODULE_PATH . '/includes';
  $includes = file_scan_directory($path, '\.inc$');
  foreach ($includes as $include)
    nodereference_explorer_include($include->name);
}

/**
 * Add PHP include files
 * @param $files
 */
function nodereference_explorer_include($files = array()) {
  //Convert file to an array if it's not one already, to compensate for lazy developers. ;)
  if (!is_array($files))
    $files = array($files);

  foreach ($files as $file)
    module_load_include('inc', NODE_REFERENCE_EXPLORER_MODULE_NAME, 'includes/' . $file);
}

/**
 * Add CSS style sheets
 * @param array $files
 */
function nodereference_explorer_add_css($files = array()) {
  // Convert file to an array if it's not one already, to compensate for
  // lazy developers. ;)
  if (!is_array($files))
    $files = array($files);

  $css_path = NODE_REFERENCE_EXPLORER_MODULE_PATH .'/css'; //from css subpath

  foreach ($files as $file)
    drupal_add_css($css_path . '/' . "$file.css");
}

/**
 * Add JS javascripts sources
 * Plugins are loaded from the plugins subdirectory
 * @param array $files
 * @param boolean $plugin
 */
function nodereference_explorer_add_js($files = array(), $plugin = FALSE) {
  static $loaded_files, $js_core; //avoid duplicate loading of js files, i. e. cache them in this array
  //Convert file to an array if it's not one already, to compensate for lazy developers. ;)
  if (!is_array($files))
    $files = array($files);

  // If base js script hasn't been added yet, add it.
  if (!isset($js_core)) {
    $js_core = TRUE;
    nodereference_explorer_add_js('explorer');
  }

  //set basis js path
  $js_path = NODE_REFERENCE_EXPLORER_MODULE_PATH .'/js'; //from js subpath

  if (!$plugin) { //add common js file
    foreach ($files as $file)
      drupal_add_js($js_path .'/' . "$file.js");
  }
  else { //add plugin js file
    //plugin js subpath
    $js_path .= '/plugins';

    //get the compression type, i. e. none, mini or packed
    $compression = variable_get('jquery_update_compression_type', 'mini');

    //depending on the compression type load the appropriate js file
    foreach ($files as $file) {
      if (!isset($loaded_files[$file])) {
        switch ($compression) {
          case 'none':
            $file_path = "$file.js";
            break;
          case 'pack':
            $file_path = "packed/$file.packed.js";
            break;
          case 'mini':
          default:
            $file_path = "minified/$file.min.js";
            break;
        }
      $js_plugin = $js_path . '/' . $file_path;
      drupal_add_js($js_plugin);
      $loaded_files[$file] = $js_plugin;
      }
    }
  }
}

/**
 * Implementation of hook_theme_registry_alter().
 *
 * Make Nodereference page preprocess function run *after* everything else's,
 * so that a theme can't call drupal_get_js() and mess everything up.
 *
 * @source jquery_update_theme_registry_alter()
 * @see nodereference_explorer_preprocess_page()
 */
function nodereference_explorer_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['page'])) {
    // If jquery_update's preprocess function is there already, remove it.
    if ($key = array_search('nodereference_explorer_preprocess_page', $theme_registry['page']['preprocess functions'])) {
      unset($theme_registry['page']['preprocess functions'][$key]);
    }
    // Now tack it on at the end so it runs after everything else.
    $theme_registry['page']['preprocess functions'][] = 'nodereference_explorer_preprocess_page';
  }
}

/**
 * Implementation of moduleName_preprocess_hook().
 *
 * A theme preprocess function to allow content type plugins to use page
 * template variables which are not yet available when the content type is
 * rendered.
 *
 * We need to store which JS and CSS files were included in the page, because
 * when JS and CSS optimalization is enabled, all these files are aggregrated into the
 * single file and this information is lost. Duplicate loading is causing errors or
 * unwanted behavior, ie. conflicts caused by duplicate javascript event handlers or
 * reset of the color scheme.
 *
 * In this hook we capture all JS and CSS files which are going to be included in the page
 * and we add them to the Drupal.settings.jsInit and Drupal.settings.cssInit arrays
 */
function nodereference_explorer_preprocess_page(&$vars) {
  $sections = array('core', 'module', 'theme');
  // load all javascript
  $javascript = drupal_add_js(); 
  $styles = drupal_add_css();
  $js = $css = array();

  // iterate through all sections and add all js and css files to our Drupal.settings storage
  foreach ($sections as $section) {
  	$js = isset($javascript[$section]) ? array_merge($js, array_keys($javascript[$section])) : $js;
    $css = isset($styles['all'][$section]) ? array_merge($css, array_keys($styles['all'][$section])) : $css;
  }

  // process javascript files
  $js = array_filter($js);
  //keeping PHP 5.1 compatibility: the following lines are equal to "$js = array_fill_keys($js , TRUE);"
  $js_files = array();
  foreach ($js as $js_file) {
    $js_files[$js_file] = TRUE;
  }
  $js = $js_files;
  $javascript['setting'][] = array('jsInit' => $js);

  // process css files
  $css = array_map('basename', array_filter($css));
  //keeping PHP 5.1 compatibility: the following lines are equal to $css = array_fill_keys($css , TRUE);
  $css_files = array();
  foreach ($css as $css_file) {
    $css_files[$css_file] = TRUE;
  }
  $css = $css_files;
  $javascript['setting'][] = array('cssInit' => $css);
  
  //attach js and css info once more, if jquery_update overrides it
  drupal_add_js(array('cssInit' => $css, 'jsInit' => $js), 'setting'); 
  
  // save processed settings back to header variable
  $vars['scripts'] = drupal_get_js('header', $javascript);
}